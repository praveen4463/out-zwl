# Tests the behaviour of ZWL when implicit type conversion occurs.

# add operation ************************************************************************************
a = "Hi johny, how's going? Are you 13 now?"
regex = "([1-2][0-9])"
b = substringRegex(a, regex)[0][0]
assert(b + 3 == 16)

a = "johny"
b = 43
assert(a + b == "johny43")
b = "43"
assert(a + b == "johny43")

a = "45"
b = "45"
assert(a + b == "90")
assert(a + b == 90)

a = 90
b = "10"
assert(a + b == 100)

# equality and not operation ***********************************************************************
a = 1
b = 1
assert("true" == (a == b))
assert((a == b) == "true")

b = 2
assert((a == b) == "false")
assert("false" == (a == b))

assert("true" == true)
assert(true == "true")
assert("false" == false)
assert(false == "false")
assert(!"false")

assert(1 == "1")
assert("1" == 1)

assert(!"false")
assertFalse("false")
assert(!(1 == "2"))
assertFalse("1" == "2")
assertFalse(!"true")

# failures
assertThrows(exceptions.invalidTypeEx, !"johny")
assertThrows(exceptions.invalidTypeEx, !1)
assertThrows(exceptions.invalidTypeEx, !"1")
assertThrows(exceptions.invalidTypeEx, true == "johny")
assertThrows(exceptions.invalidTypeEx, 1 == "johny")
assertThrows(exceptions.invalidTypeEx, [1, 2] == "[2, 3]")
assertThrows(exceptions.invalidTypeEx, {age: 11} == "{age: 11}")
assertThrows(exceptions.invalidTypeEx, assert("falsee"))
assertThrows(exceptions.invalidTypeEx, assert("truee"))

# comparision operation ****************************************************************************
assert(1 > "0")
assert("1" > 0)
assert("1" > "0")

assert("10" < 50)
assert(50 < "100")
assert("100" < "200")

assert(50 >= "50")
assert("70" >= 50)
assert("100" >= "90")

assert(200 <= "201")
assert("200" <= 299)
assert("100" <= "100")

# failures
assertThrows(exceptions.invalidTypeEx, 1 > "johny")
assertThrows(exceptions.invalidTypeEx, "1L" >= 0)
assertThrows(exceptions.invalidTypeEx, true < 500)
assertThrows(exceptions.invalidTypeEx, "hi" <= 10)

# arithmetic operation *****************************************************************************
assert(2 * "8" == 16)
assert("10" * 2 == 20)
assert("10" * "10" == 100)

assert("100" / 1 == 100)
assert(1 / "100" == .01)
assert("100" / "100" == 1)

assert("10" % 2 == 0)
assert(5 % "2" == 1)
assert("4" % "2" == 0)

assert("10" - 1 == 9)
assert(9 - "4" == 5)
assert("20" - "30" == -10)
assert(-"100" == -100)

# failures
assertThrows(exceptions.invalidTypeEx, true * 5)
assertThrows(exceptions.invalidTypeEx, "100" / "2K")
assertThrows(exceptions.invalidTypeEx, "john" % 5)
assertThrows(exceptions.invalidTypeEx,  -"2L")

# logical operation ********************************************************************************
assert("true" && true)
assert(!"false" && true)
assert(true && !"false")
assert("true" && "true")
assertFalse("false" && false)
assertFalse(false && "false")
assertFalse("false" && "false")

assert("false" || true)
assert(false || ("true" || false))
assert("false" || "true")
assertFalse("false" || !"true")
assertFalse(false || "false")

# failures
assertThrows(exceptions.invalidTypeEx, "true" && 12)
assertThrows(exceptions.invalidTypeEx, "false" || 1)
