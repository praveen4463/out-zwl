# dry run feature enable users to stub functions that uses webdriver so that the behaviour of other
# zwl functions can be tested without running a webdriver.

a = [1, 2, 3]
printF("size of a is %s", size(a))

# first do a series of tests to make sure the logic of default value work, and then test all
# functions in the same way to see they all have the required code for dry running and are ok with
# the null arguments (such as webdriver) given to their constructor.

# when no default value is given, function's own should returned
elemId = findElement(".some-selector")
assertTrue(isValidElemId(elemId))

# when a default is given, that is returned if it matches function's return type
elemId = findElement(".some-other-selector") ?? { "invalid-element-id" }
assertFalse(isValidElemId(elemId))

# when a default is given, that doesn't matches function's return type, exception is returned
assertThrows(exceptions.invalidTypeEx,
    findElement(".some-other-selector") ?? { true }
)

# when a void function is given some default value, it is ignored and void is returned.
shouldBeVoid = openUrl("https://google.co.in") ?? { "I-should-not-be-returned" }
assertTrue(isVoid(shouldBeVoid))

# if some function's return type is Object, any type of user supplied value should be returned
shouldBeBoolean = executeScript("document.location = 'https://google.com'") ?? { true }
assertTrue(shouldBeBoolean)

# now test just the default value assigned to all functions-----------------------------------------
assertTrue(isVoid(dragAndDrop("#credit2", "#bank")))

assertTrue(isVoid(performAction(
  move(".d1"),
  hold(),
  move(".s", 0, -15),
  release()
)))

assertTrue(isVoid(scroll("#credit2")))

assertTrue(colorMatches("#invalid-color", colors.blueviolet))

assertTrue(isVoid(close()))

assertTrue(size(getAllWinIds()) > 1)

winIdMinLength = 10 # window ids are more than 10 chars long string

assertTrue(length(getCurrentWinId()) > winIdMinLength)

assertTrue(isVoid(newWin("tab")))

assertTrue(isVoid(switchFrame(0)))

assertTrue(isVoid(switchParentFrame()))

assertTrue(isVoid(switchWin()))

assertTrue(isVoid(fullScreenWin()))

m = getWinPosition()
assertTrue(m.x > 0 && m.y > 0)

m = getWinSize()
assertTrue(m.width > 0 && m.height > 0)

assertTrue(isVoid(maximizeWin()))

assertTrue(isVoid(moveWinBy(1, 1)))

assertTrue(isVoid(resizeWinBy(1, 1)))

assertTrue(isVoid(setWinPosition(1, 1)))

assertTrue(isVoid(setWinSize(1, 1)))

assertTrue(isVoid(addCookie("zwl_cookie", "1188", "/", "zylitics.io", 365*24*60*60*1000)))

assertTrue(isVoid(deleteAllCookies()))

assertTrue(isVoid(deleteCookie("zwl_cookie")))

assertTrue(size(getCookies()) > 1)

assertTrue(length(getNamedCookie(getCookies()[0].name).name) > 0)

assertFalse(exists(executeAsyncScript("const a = 1")))

assertFalse(exists(executeScript("const a = 1")))

assertTrue(length(getPageSource()) > 0)

assertTrue(isVoid(clear("#ch1")))

assertTrue(isVoid(clearAll("#ch1", "#ch2")))

assertTrue(isVoid(click("#ch1")))

assertTrue(isVoid(clickAll("#ch1", "#ch2")))

assertTrue(length(clickNoSwitch(".a1")) > winIdMinLength)

assertTrue(isVoid(clickSwitchNew(".a2")))

assertTrue(isVoid(submit(".b1")))

assertTrue(isVoid(sendKeysToPage(".doc-click", keys.shift, "r")))

assertTrue(isVoid(sendKeysToPageF("j")))

assertTrue(isVoid(setFile("#f_single", "abc.pdf")))

assertTrue(isVoid(setFiles("#f_mul", "abc.pdf", "xyz.pdf")))

assertTrue(isVoid(type("#fname", "praveen")))

assertTrue(isVoid(typeActive("praveen")))

assertTrue(isVoid(typeIntoElements("same-illegal-string", "#fname", "#lname")))

assertTrue(isVoid(typeUsingMap({"#inp1": 1234, "#inp2": 3333})))

assertTrue(isValidElemId(activeElement()))

assertTrue(isValidElemId(findElement(".d1")))

assertTrue(isValidElemId(findElementFromElement(".p1", ".d1")))

assertTrue(size(findElements(".m1")) > 1)

assertTrue(size(findElementsFromElement(".p1", ".m1")) > 1)

assertTrue(size(findElementsWithSelectors(".unknown", ".m1")) > 1)

assertTrue(isValidElemId(findElementWithSelectors(".unknown", ".d1")))

assertTrue(allElementsDisplayed("#chk1", "#chk2"))

assertTrue(allElementsEnabled("#chk1", "#chk2"))

assertTrue(allElementsSelected("#chk1", "#chk2"))

assertTrue(anyElementDisplayed("#chk1", "#chk2"))

assertTrue(anyElementEnabled("#chk1", "#chk2"))

assertTrue(anyElementSelected("#chk1", "#chk2"))

assertTrue(isVoid(captureElementScreenshot(".d1")))

assertTrue(elementExists("#chk1"))

unknown = "unknown"

assertTrue(getElementAttribute("#chk1", "type") == unknown)

assertTrue(getElementAttributeOrCssValue("#chk1", "type") == unknown)

assertTrue(getElementCssValue("#chk1", "position") == unknown)

m = getElementRect(".t1")
assertTrue(m.width > 0 && m.height > 0 && m.x > 0 && m.y > 0)

assertTrue(length(getElementText(".d1")) > 0)

assertTrue(length(getElementValue("#t1")) > 0)

m = getElementViewportCoordinates(".t1")
assertTrue(m.x > 0 && m.y > 0)

assertTrue(length(getTagName("#chk1")) > 0)

assertTrue(isElementDisplayed("#chk1"))

assertTrue(isElementEnabled("#chk1"))

assertTrue(isElementSelected("#chk1"))

assertTrue(isStale(findElement("#chk1")))

assertTrue(isVoid(back()))

assertTrue(isVoid(forward()))

assertTrue(length(getCurrentUrl()) > 0)

assertTrue(length(getTitle()) > 0)

assertTrue(isVoid(openUrl("www.google.com")))

assertTrue(isVoid(openUrlNewWin("www.google.com")))

assertTrue(isVoid(refresh()))

assertTrue(isVoid(acceptAlert()))

assertTrue(isVoid(dismissAlert()))

assertTrue(length(getAlertText()) > 0)

assertTrue(isVoid(sendAlertText("some-input")))

assertTrue(isVoid(deselectAll(".s1")))

assertTrue(isVoid(deselectByIndex(".s1", 1)))

assertTrue(isVoid(deselectByValue(".s1", "1")))

assertTrue(isVoid(deselectByVisibleText(".s1", "Good bye")))

assertTrue(size(getAllSelectedOptions(".s1")) > 1)

assertTrue(isValidElemId(getFirstSelectedOption(".s1")))

assertTrue(size(getOptions(".s1")) > 1)

assertFalse(isMultiple(".s1"))

assertTrue(isVoid(selectByIndex(".s1", 1)))

assertTrue(isVoid(selectByValue(".s1", "1")))

assertTrue(isVoid(selectByVisibleText(".s1", "Good bye")))

assertTrue(isVoid(lsClear()))

assertTrue(lsGetItem("some-key") == unknown)

assertTrue(size(lsGetKeySet()) > 1)

assertTrue(isVoid(lsRemoveItem("some-key")))

assertTrue(isVoid(lsSetItem("some-key", "some-value")))

assertTrue(lsSize() > 1)

assertTrue(isVoid(ssClear()))

assertTrue(ssGetItem("some-key") == unknown)

assertTrue(size(ssGetKeySet()) > 1)

assertTrue(isVoid(ssRemoveItem("some-key")))

assertTrue(isVoid(ssSetItem("some-key", "some-value")))

assertTrue(ssSize() > 1)

assertTrue(isVoid(setElementAccessTimeout(1)))

assertTrue(isVoid(setPageLoadTimeout(1)))

assertTrue(isVoid(setScriptTimeout(1)))

assertTrue(getTimeout(timeouts.elemAccess) > 10)

assertTrue(isVoid(untilAlertPresent()))

all = [".chk1", ".chk2"]
chk1 = ".chk1"

assertTrue(untilAllDisabled(all))

assertTrue(untilAllEnabled(all))

assertTrue(untilAllInvisible(all))

assertTrue(untilAllRemoved(all))

assertTrue(size(untilAllSelectionsAre(true, all)) > 1)

assertTrue(untilAllVisible(all))

assertTrue(size(untilAnySelectionIs(false, all)) > 1)

assertTrue(untilAttributeValueContains(chk1, "data", "anything"))

assertTrue(untilAttributeValueIs(chk1, "margin-left", "100px"))

assertTrue(untilAttributeValueLike(chk1, "secret", "^[a-zA-Z0-9]+$"))

assertTrue(untilAttributeValueNonEmpty(chk1, "rel"))

assertTrue(untilClicked(chk1))

assertTrue(untilDisabled(chk1))

assertTrue(untilEnabled(chk1))

assertTrue(untilInvisible(chk1))

assertFalse(exists(untilJsReturnsAValue("const a = 1")))

assertTrue(untilJsThrowsNoException("const a = 1"))

assertTrue(untilRemoved(chk1))

assertTrue(untilSelectionIs(chk1, false))

assertTrue(untilStale(findElement(chk1)))

assertTrue(untilSwitchedToFrame(0))

assertTrue(untilTextContains(".div1", "watch"))

assertTrue(untilTextIs(".div1", "watch"))

assertTrue(untilTextLike(".div2", "#[1-9][A-B0-9]{9}$"))

assertTrue(length(untilTextNonEmpty(".div1")) > 0)

assertTrue(untilTitleContains("welcome"))

assertTrue(untilTitleIs("welcome to facebook"))

assertTrue(size(untilTotalElementsEQ(3, 'div', by.tagName)) > 1)

assertTrue(size(untilTotalElementsGT(3, 'div', by.tagName)) > 1)

assertTrue(size(untilTotalElementsLT(2, 'div', by.tagName)) > 1)

assertTrue(untilTotalWindowsAre(2))

assertTrue(untilUrlContains("google"))

assertTrue(untilUrlIs("www.google.com"))

assertTrue(untilUrlLike("google"))

assertTrue(untilValueContains(chk1, "consent"))

assertTrue(untilValueIs(chk1, "accept cookies"))

assertTrue(untilValueLike(chk1, "[8-9][0-9]{9}$"))

assertTrue(length(untilValueNonEmpty(".tx1")) > 0)

assertTrue(untilVisible(chk1))

# isValidElemId - shouldn't be stubbed and doesn't have the code.

assertTrue(isVoid(sleep(20000)))
