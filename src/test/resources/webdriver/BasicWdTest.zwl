# Some basic webdriver tests just to see simple things work.
staticSitePrefix = staticSite.urlPrefix
# 1. simple google search test
openUrl("https://google.com")
# sometime when IE opens, google tries to bully it by luring user towards downloading it.
chromeDownloadOffer = findElements("div#gbw a.gb_0", true)
if size(chromeDownloadOffer) > 0 {
  click(chromeDownloadOffer[0])
  click("input[name='q']") # since we changed the focus, let's make search box active so further code runs fine.
}
# when user doesn't give attention to previous offer, google tells to make google their homepage, hell.
chromeHomePageOffer = findElements("div#gbw a.gb_Nd", true)
if size(chromeHomePageOffer) > 0 {
  click(chromeHomePageOffer[0])
  click("input[name='q']") # since we changed the focus, let's make search box active so further code runs fine.
}

typeActive("apple.com", keys.enter)
# this selector gives all results but findElement will return the first one
firstResult = findElement("div.r > a > h3")
assertTrue(getElementText(firstResult) == "Apple")
click(firstResult)
untilTitleIs("Apple")


# 2. open a page, send keys to it and check if the intended effect took place.
#openUrl("https://jsfiddle.net/praveen4463/vxk59gph/")
openUrl(staticSitePrefix + "wd_document_click_and_keydown_c.html")
switchFrame("iframe[name='result']")
sendKeysToPage(".doc-click", keys.shift, "r")
assertTrue(trim(getElementText(".doc-click")) == "document clicked")
assertTrue(trim(getElementText(".doc-keydown-key")) == "Shift R")
# key's code property isn't supported in IE, thus not asserting there.
if browser.name != "IE" {
  assertTrue(trim(getElementText(".doc-keydown-code")) == "ShiftLeft KeyR")
}
# again send keys this time lower cased and see lower case is printed since shift went up
sendKeysToPageF("r")
assertTrue(trim(getElementText(".doc-click")) == "document clicked")
# shift went up in last sendKeysToPage call, thus 'r' will print as is without upper case
assertTrue(trim(getElementText(".doc-keydown-key")) == "Shift R r")
# key's code property isn't supported in IE, thus not asserting there.
if browser.name != "IE" {
  assertTrue(trim(getElementText(".doc-keydown-code")) == "ShiftLeft KeyR KeyR")
}



# 3. text matching single line
openUrl("https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes")
# when we see wrapped text on a site, it doesn't mean the text has a line break, text is just
# wrapped by using css on element. Thus when we copy paste that to editor, we will get a whole
# big line that will need to be put as string.
expectedText = "Pseudo-classes let you apply a style to an element not only in relation to the" +
" content of the document tree, but also in relation to external factors like the history of the" +
" navigator (:visited, for example), the status of its content (like :checked on certain form" +
" elements), or the position of the mouse (like :hover, which lets you know if the mouse is over" +
" an element or not)."
assertTrue(getElementText("#wikiArticle > p:nth-of-type(2)") == expectedText)



# 4. text matching multi line
#openUrl("https://jsfiddle.net/praveen4463/hvex69tp/")
openUrl(staticSitePrefix + "multi_line_text_c.html")
switchFrame("iframe[name='result']")
# I copy/pasted following text from the above page, using mouse selection. See the
# whitespaces before 2nd and 3rd line. These whitespace causes the string to be different than what
# is rendered on page thus a mismatch with selenium's getText. To correctly copy, first paste just
# the text and then write variable name so that IDE won't put those spaces to indent everything, may
# be it's just with idea. Mention this for user so they take care while pasting content, probably
# set the ZWL ide in way that it won't indent on paste.
/*
expectedText = `hey you, where were you all day, i was looking for you,
                I gave that thing to one of your friend, could you take
                that from him?`
*/
expectedText = `hey you, where were you all day, i was looking for you,
I gave that thing to one of your friend, could you take
that from him?`
actual = getElementText("div")
/*printF("actual: \"%s\", length of actual: %s, length of expected: %s", actual,
    length(actual), length(expectedText))*/
assertTrue(trim(actual) == expectedText)



# 5. special characters
openUrl("https://google.com")
# check this here too so tht when chrome offer is declined, google opened again, it shows something, we've this to
# handle.
chromeHomePageOffer = findElements("div#gbw a.gb_Nd", true)
if size(chromeHomePageOffer) > 0 {
  click(chromeHomePageOffer[0])
  click("input[name='q']") # since we changed the focus, let's make search box active so further code runs fine.
}
q = activeElement()
if browser.name == "chrome" {
  text = "hi buddy â™», whats up âšœ"
} else {
  text = "hi buddy ðŸ˜€ what's up ðŸ˜†"
}
type(q, text)
assertTrue(getElementValue(q) == text)



# 6. test various selector types
openUrl("https://docs.microsoft.com/en-us/")

click(findElement("Microsoft Kaizala", by.lt)) # link text
untilTitleContains("Microsoft Kaizala")

click(findElement("Integrate with other business apps", by.plt)) # partial link text
untilTitleContains("Automating business process using Kaizala")

assertTrue(
    getElementText(findElement(".//h3[@id='sample-screenshot-of-the-email-received']", by.xp))
        == "Sample screenshot of the email received:") # xpath

assertTrue(getElementText(findElement("steps", by.id)) == "Steps:") # id

main = findElement("main", by.tn) # tag name
assertTrue(getElementAttribute(main, "dir") == "ltr")

openUrl("http://static.wditp.zylitics.io/html/mouse_move_click_c.html")
switchFrame(findElement("result", by.name)) # name
assertTrue(getElementText(findElement("div4", by.cn)) == "to the far right now") # class name
assertTrue(getElementText(findElement(".div1", by.cs, true)) == "I am here") # css selector

openUrl("https://docs.microsoft.com/en-us/")
totalAzureLinks = findElements("Azure", by.plt, true) # multiple links by partial text
assertTrue(size(totalAzureLinks) > 1)
click(totalAzureLinks[0])
untilTitleContains("Azure documentation")

back()
dirContainer = findElement("section.directory-container")
assertTrue(getElementText(
    findElementFromElement(dirContainer, "docs-directory", by.id, true)) == "Docs Directory")

allLinks = findElementsFromElement(dirContainer, "barLink", by.cn)
assertTrue(size(allLinks) > 1)
click(allLinks[2])
untilTitleContains("ASP.NET documentation")