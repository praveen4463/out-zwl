# Tests expect one file with at least 4 tests loaded into IDE
# These tests are ready to load into IDE when it's up and running, every test runs independently.

#====================================================================
#### Test: syntax highlighting works expected
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
# editor should now be focused
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
# don't put the closing } because when first {, it's closing appears on it's own in IDE
typeActive(globals.SAMPLE_CODE)
editor = findElement(globals.TEST_ID_EDITOR, by.testId)
stringColor = "#85CF84"
string = findElementFromElement(editor, "/^\"[a-z]+\\[[a-z]+='[a-z]+'\\]\"$/", by.text)
assertTrue(colorMatches(stringColor, getElementCssValue(string, "color")))
variableColor = "#DAECEC"
variable = findElementFromElement(editor, "chromeHomePageOffer", by.text)
assertTrue(colorMatches(variableColor, getElementCssValue(variable, "color")))
keywordColor = "#C792EA"
keyword = findElementFromElement(editor, "if", by.text)
assertTrue(colorMatches(keywordColor, getElementCssValue(keyword, "color")))
operatorColor = "#89DDFF"
operator = findElementFromElement(editor, ">", by.text)
assertTrue(colorMatches(operatorColor, getElementCssValue(operator, "color")))
defColor = "#86A8F0"
def = findElementFromElement(editor, "findElements", by.text)
assertTrue(colorMatches(defColor, getElementCssValue(def, "color")))
atomColor = "#F78C6C"
atom = findElementFromElement(editor, "true", by.text)
assertTrue(colorMatches(atomColor, getElementCssValue(atom, "color")))
numberColor = "#FF5370"
number = findElementFromElement(editor, "0", by.text)
assertTrue(colorMatches(numberColor, getElementCssValue(number, "color")))
commentColor = "#7D7878"
comment = findElementFromElement(editor, "/^#\\s*.*?/", by.text)
assertTrue(colorMatches(commentColor, getElementCssValue(comment, "color")))

#====================================================================
#### Test: line and column appears and changes on cursor move
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
lnCol = findElement(format(globals.LINE_COL_FORMAT, 1, 1), by.text)
performAction(sendKeys(keys.enter))
assertTrue(getElementText(lnCol) == format(globals.LINE_COL_FORMAT, 2, 1))
performAction(sendKeys(keys.space, keys.space, keys.space, keys.space))
assertTrue(getElementText(lnCol) == format(globals.LINE_COL_FORMAT, 2, 5))

#====================================================================
#TODO: more tests like goto line, search, selecting text highlight all, match pair, trailing space,
# active line and gutter

#====================================================================
#### Test: hinting and filtering works for functions
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
active = activeElement()
type(active, "f")
hints = findElement(globals.SELECTOR_HINT)
funFindElmFrom = findElementFromElement(hints, "/^findElementFromElement\\(.+?\\)$/", by.text)
assertTrue(isElementDisplayed(funFindElmFrom))
# now try typing more and see where list refined itself
type(active, "indElements")
# we've to find hints again cause typing more creates new instance of list
hints = findElement(globals.SELECTOR_HINT)
assertThrows(exceptions.noSuchElemEx,
    findElementFromElement(hints, "/^findElementFromElement\\(.+?\\)$/", by.text, true))
# findElementxx are gone but findElementsxx should be visibile
funFindElms = findElementFromElement(hints, "/^findElements\\(.+?\\)$/", by.text)
assertTrue(isElementDisplayed(funFindElms))

#====================================================================
#### Test: hinting and filtering works for constants
# TODO: more hinting tests such as no duplicate build vars
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
active = activeElement()
type(active, "ex")
hints = findElement(globals.SELECTOR_HINT)
varExceptions = findElementFromElement(hints, "exceptions", by.text)
assertTrue(isElementDisplayed(varExceptions))
click(varExceptions)
isStale(hints)
type(active, ".")
assertTrue(isElementDisplayed(findElement(globals.SELECTOR_HINT)))
type(active, "nosuch")
hints = findElement(globals.SELECTOR_HINT)
assertTrue(size(findElementsFromElement(hints, "/^nosuch/i", by.text)) > 5)
type(active, "elem")
hints = findElement(globals.SELECTOR_HINT)
exNoSuchElem = findElementsFromElement(hints, "/^nosuch/i", by.text)
assertTrue(size(exNoSuchElem) == 1)
click(exNoSuchElem)
editor = findElement(globals.TEST_ID_EDITOR, by.testId)
assertTrue(getElementText(findElementFromElement(editor, ".CodeMirror-line")) ==
    "exceptions.noSuchElemEx")

#====================================================================
#### Test: hinting and filtering works for variables declared above
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
active = activeElement()
type(active, "arrangedRecords", keys.enter)
type(active, "checkedRecords", keys.enter)
type(active, "arranged")
hints = findElement(globals.SELECTOR_HINT)
assertTrue(isElementDisplayed(findElementFromElement(hints, "arrangedRecords", by.text)))
type(active, keys.enter, keys.enter, "checked")
hints = findElement(globals.SELECTOR_HINT)
assertTrue(isElementDisplayed(findElementFromElement(hints, "checkedRecords", by.text)))
type(active, keys.enter) # this will select the hint
# now move 3 up, touch the top and then move cursor to end, then hit enter so that cursor is above
# checkedRecords
performAction(sendKeys(keys.up, keys.up, keys.up), ctrlDown(), sendKeys("e"), ctrlUp(),
    sendKeys(keys.enter))
type(active, "checked")
# there shouldn't be any hint when we're above variable checkedRecords
assertThrows(exceptions.noSuchElemEx, findElement(globals.SELECTOR_HINT, true))

#====================================================================
#### Test: scroll and cursor position maintains on tab switch
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
click(tests[1])
version = findElementFromElement(tests[1], globals.TEST_ID_VERSION_TREE_ITEM)
click(version) # don't dbl click else editor looses out focus, let's keep the focus simple way
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
active = activeElement()
# type lot of code for this version so that there will be a scroll
for i = 1 to 10 {
  type(active, globals.SAMPLE_CODE, keys.down, keys.right, keys.enter)
}
# varAtLastTabs serves as a check for scroll position for this tab
type(active, "varAtLastTab2")
# keep cursor position for this tab
lnColTab2 = getElementText(findElement(globals.TEST_ID_LINE_COL, by.testId))

tabs = findElements(globals.ROLE_TAB_BUTTON)
# move to tab1, enter code and record positions
click(tabs[0])
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
# add few more lines so that cursor is different for both tabs
for i = 1 to 12 {
  type(active, globals.SAMPLE_CODE, keys.down, keys.right, keys.enter)
}
type(active, "varAtLastTab1")
lnColTab1 = getElementText(findElement(globals.TEST_ID_LINE_COL, by.testId))
# move to 2nd tab
click(tabs[1])
editor = findElement(globals.TEST_ID_EDITOR, by.testId)
# !!this is enough to test that the last written variable is displayed, codemirror render lines those
# are in viewport when the viewport is scrolled and remove those are not in viewport, thus if we
# can search and see variable, that means the editor is correctly scrolled to it.
assertTrue(isElementDisplayed(findElementFromElement(editor, "varAtLastTab2", by.text, true)))
assertTrue(lnColTab2 == getElementText(findElement(globals.TEST_ID_LINE_COL, by.testId)))
# move to 1st tab
click(tabs[0])
assertTrue(isElementDisplayed(findElementFromElement(editor, "varAtLastTab1", by.text, true)))
assertTrue(lnColTab1 == getElementText(findElement(globals.TEST_ID_LINE_COL, by.testId)))

#====================================================================
#### Test: code is getting saved on content change and save message appears/disappears
# TODO: more tests when api is integrated:
#  - refresh page and check code is there once
#  - write invalid code and see parsing is failing
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
active = activeElement()
type(active, "shouldPersist = 0")
tabs = findElements(globals.ROLE_TAB_BUTTON)
# close the only tab opened, this will unmount whole component but the code should save detecting
# an unmount in global state and via api. Reopen tab and check.
click(findElementFromElement(tabs[0], globals.TEST_ID_CLOSE_ICON))
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
editor = findElement(globals.TEST_ID_EDITOR, by.testId)
assertTrue(isElementDisplayed(findElementFromElement(editor, "shouldPersist", by.text)))
performAction(
  ctrlDown(),
  sendKeys("e"),
  ctrlUp(),
  sendKeys(keys.enter)
)
active = activeElement()
type(active, "allowSave = 1")
# we've entered some text, wait until it gets saved and save message appears then disappears
status = findElement(globals.TEST_ID_EDITOR_STATUS, by.testId)
untilTextContains(status, "changes saved")
untilTextIs(status, "")

# TODO:
# Note: All tests related to parse and dry run here are running by simulating an api pass/fail via
# code workarounds. When there will be api integrated, we can just enter valid/invalid code and can
# expect the correct dry run/parse behaviour and expected line/characters in error but for now until
# there is api, when code contains FAIL_TEST && FAIL_DRY text, a predefined error message and line/ch triggers,
# otherwise it passes. Refer to the code for error messages and line numbers in different contexts
# NOTE THAT ALL TESTS NEEDS TO BE UPDATED WHEN API IS INTEGRATED TO USE REAL PROCESS AND NOT SIMULATED
#====================================================================
#### Test: automatic parsing triggers automatically and fails lexically invalid code
# TODO: more tests:
# - when no code in editor, no auto parsing triggers
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
errorCode = `a = 1
a += 1 # this is invalid operator, put it on line 2:1 as the code mentioned the same line
# Above generates a parse error.FAIL_TEST`
typeActive(errorCode)
status = findElement(globals.TEST_ID_EDITOR_STATUS, by.testId)
untilTextIs(status, format(globals.EDITOR_OUTPUT_FAIL_STATUS_MSG_FORMAT, globals.RUN_TYPE_NAME_PARSE))
outputPanel = findElement(globals.TEST_ID_EDITOR_OUTPUT, by.testId)
assertTrue(getElementText(outputPanel) == "") # because it's hidden
click(status) # now output panel should be visible, it's content should be visible and retrievable
assertTrue(containsString(getElementText(outputPanel), "no viable alternative at input 'a+'"))
errorLine = findElements(".CodeMirror-line")[1] # problematic char is on 2nd line
assertTrue(getElementText(findElementFromElement(errorLine, ".cm-variable.cm-errorText")) == "a")
# if the variable a has the error css class, this means we've error underlined it.
assertTrue(getElementText(findElementFromElement(errorLine, ".cm-operator")) == "+=")
# make sure selected line has the invalid operator and we're not on the wrong line
assertTrue(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME)
        , "color")
  )
)
assertTrue(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(tests[0], globals.TEST_ID_TEST_TREE_ITEM_NAME)
        , "color")
  )
)
assertTrue(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME)
        , "color")
  )
)

#====================================================================
#### Test: automatic parsing when succeeds after failure, does make resets
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
errorCode = `a = 1
a += 1 # this is invalid operator, put it on line 2:1 as the code mentioned the same line
# Above generates a parse error.FAIL_TEST`
typeActive(errorCode)
status = findElement(globals.TEST_ID_EDITOR_STATUS, by.testId)
untilTextIs(status, format(globals.EDITOR_OUTPUT_FAIL_STATUS_MSG_FORMAT, globals.RUN_TYPE_NAME_PARSE))
# we've parse error, let's fix code so parsing succeeds
# delete the last line and wait for parse to trigger
performAction(
  cmdCtrlDown(),
  sendKeys("d"),
  cmdCtrlUp()
)
untilTextContains(status, "saved")
outputPanel = findElement(globals.TEST_ID_EDITOR_OUTPUT, by.testId)
assertTrue(getElementText(outputPanel) == "") # because it's hidden
click(status) # now output panel should be visible, it's content should be visible and retrievable
assertTrue(containsString(getElementText(outputPanel), "no problems found"))
errorLine = findElements(".CodeMirror-line")[1] # problematic char is on 2nd line
assertTrue(getElementText(findElementFromElement(errorLine, ".cm-operator")) == "+=")
# make sure selected line has the invalid operator and we're not on the wrong line
offendingCharClasses = getElementAttribute(findElementFromElement(errorLine, ".cm-variable"),
    "class")
assertFalse(containsString(offendingCharClasses, "cm-errorText")) # error underline is removed
assertFalse(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME)
        , "color")
  )
)
assertFalse(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(tests[0], globals.TEST_ID_TEST_TREE_ITEM_NAME)
        , "color")
  )
)
assertFalse(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME)
        , "color")
  )
)

#====================================================================
#### Test: run controls freezes editor and disables other controls on panel until run completes
# TODO: more related tests:
# - check other versions are frozen too while something running
# - when no code in editor, nothing runs and errors
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
active = activeElement()
type(active, "# comment")
commentElement = findElement(".CodeMirror-line .cm-comment")
dryRun = findElement(globals.TEST_ID_EDITOR_OUTPUT_DRY_BTN, by.testId)
buildRun = findElement(globals.TEST_ID_EDITOR_OUTPUT_BUILD_BTN, by.testId)
parseRun = findElement(globals.TEST_ID_EDITOR_OUTPUT_PARSE_BTN, by.testId)
click(dryRun)
assertFalse(isElementEnabled(dryRun))
assertFalse(isElementEnabled(buildRun))
assertFalse(isElementEnabled(parseRun))
# try delete the comment line from editor, it shouldn't be deleted
click(".CodeMirror-code")
performAction(
  cmdCtrlDown(),
  sendKeys("d"),
  cmdCtrlUp()
)
assertFalse(isStale(commentElement))
status = findElement(globals.TEST_ID_EDITOR_STATUS, by.testId)
untilTextIs(status, format(globals.EDITOR_OUTPUT_PASS_STATUS_MSG_FORMAT, globals.RUN_TYPE_NAME_DRY))
assertTrue(isElementEnabled(dryRun))
assertTrue(isElementEnabled(buildRun))
assertTrue(isElementEnabled(parseRun))
click(".CodeMirror-code")
performAction(
  cmdCtrlDown(),
  sendKeys("d"),
  cmdCtrlUp()
)
assertTrue(isStale(commentElement))

#====================================================================
#### Test: dry run fails on invalid code and resets on valid
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
errorCode = `openUrl("https://example.com")
findElement(
  ".some-selector",
  "Push Me",
  by.text,
  true
) # this is invalid function definition, put it on line 2:1 to 7:2 as the code mentioned the same
# Above generates a dry run error.FAIL_DRY`
typeActive(errorCode)
dryRun = findElement(globals.TEST_ID_EDITOR_OUTPUT_DRY_BTN, by.testId)
click(dryRun)
status = findElement(globals.TEST_ID_EDITOR_STATUS, by.testId)
untilTextIs(status, format(globals.EDITOR_OUTPUT_FAIL_STATUS_MSG_FORMAT, globals.RUN_TYPE_NAME_DRY))
outputPanel = findElement(globals.TEST_ID_EDITOR_OUTPUT, by.testId)
output = getElementText(outputPanel)
assertTrue(containsString(output, "Executing function findElement with arguments")) # this is normal output
assertTrue(containsString(output, "findElement with parameters count: 4 isn't defined")) # this is error output
errorLineStart = findElements(".CodeMirror-line")[1] # problematic char starts from 2nd line
errorLineMid = findElements(".CodeMirror-line")[3]
errorLineEnd = findElements(".CodeMirror-line")[6] # problematic char ends at 7th line
assertTrue(getElementText(findElementFromElement(errorLineStart, ".cm-def.cm-errorText")) ==
    "findElement")
assertTrue(getElementText(findElementFromElement(errorLineMid, ".cm-string.cm-errorText")) ==
    "\"Push Me\"")
assertTrue(getElementText(findElementFromElement(errorLineEnd, ".cm-errorText")) == ")")
# if the tokens have error css class, this means we've error underlined it.
# now lets fix code
click(".CodeMirror-code")
if platform == "windows" {keyEnd = sendKeys(keys.end)} else {keyEnd = sendKeys(keys.down)}
# go to end of document and delete last line
performAction(
  cmdCtrlDown(),
  keyEnd,
  sendKeys("d"),
  cmdCtrlUp()
)
click(dryRun)
untilTextIs(status, format(globals.EDITOR_OUTPUT_PASS_STATUS_MSG_FORMAT, globals.RUN_TYPE_NAME_DRY))
output = getElementText(outputPanel)
assertFalse(containsString(output, "findElement with parameters count: 4 isn't defined"))
# find lines again as when error underline removes, those lines recreate
errorLineStart = findElements(".CodeMirror-line")[1]
errorLineMid = findElements(".CodeMirror-line")[3]
errorLineEnd = findElements(".CodeMirror-line")[6]
offendingCharClasses = getElementAttribute(findElementFromElement(errorLineStart, ".cm-def"),
    "class")
assertFalse(containsString(offendingCharClasses, "cm-errorText"))
offendingCharClasses = getElementAttribute(findElementFromElement(errorLineMid, ".cm-string"),
    "class")
assertFalse(containsString(offendingCharClasses, "cm-errorText"))
offendingCharClasses =
    getElementAttribute(findElementFromElement(errorLineEnd, "presentation", by.role), "class")
assertFalse(containsString(offendingCharClasses, "cm-errorText"))

#====================================================================
#### Test: parsing fails on invalid code and resets on valid
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(
  cmdCtrlDown(),
  sendKeys("a"),
  cmdCtrlUp(),
  sendKeys(keys.delete)
)
errorCode = `openUrl("https://example.com")
findElement("Push Me", by.text)
assertTrue(@ == @) # this is invalid token at line 3:12
# Above generates a dry run error.FAIL_TEST`
typeActive(errorCode)
parse = findElement(globals.TEST_ID_EDITOR_OUTPUT_PARSE_BTN, by.testId)
click(parse)
status = findElement(globals.TEST_ID_EDITOR_STATUS, by.testId)
untilTextIs(status, format(globals.EDITOR_OUTPUT_FAIL_STATUS_MSG_FORMAT, globals.RUN_TYPE_NAME_PARSE))
outputPanel = findElement(globals.TEST_ID_EDITOR_OUTPUT, by.testId)
output = getElementText(outputPanel)
assertTrue(containsString(output, "token recognition error at: '@'"))
errorLine = findElements(".CodeMirror-line")[2] # problematic char is on 3rd line
assertTrue(getElementText(findElementFromElement(errorLine, ".cm-errorText")) == "@")
assertTrue(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME)
        , "color")
  )
)
assertTrue(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(tests[0], globals.TEST_ID_TEST_TREE_ITEM_NAME)
        , "color")
  )
)
assertTrue(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME)
        , "color")
  )
)
# now lets fix code (we're not actually fixing code but remove keyword that will trigger success,
# when api integrated, remove existing code and type valid to let it pass)
click(".CodeMirror-code")
if platform == "windows" {keyEnd = sendKeys(keys.end)} else {keyEnd = sendKeys(keys.down)}
# go to end of document and delete last line
performAction(
  cmdCtrlDown(),
  keyEnd,
  sendKeys("d"),
  cmdCtrlUp()
)
click(parse)
untilTextIs(status, format(globals.EDITOR_OUTPUT_PASS_STATUS_MSG_FORMAT,
    globals.RUN_TYPE_NAME_PARSE))
output = getElementText(outputPanel)
assertFalse(containsString(output, "token recognition error at: '@'"))
errorLine = findElements(".CodeMirror-line")[2]
assertThrows(exceptions.noSuchElemEx, findElementFromElement(errorLine, ".cm-errorText", true))
assertFalse(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME)
        , "color")
  )
)
assertFalse(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(tests[0], globals.TEST_ID_TEST_TREE_ITEM_NAME)
        , "color")
  )
)
assertFalse(
  colorMatches(
    globals.COLOR_EXP_ITEM_ERROR,
    getElementCssValue(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME)
        , "color")
  )
)

#====================================================================
#### Test: build run TODO: do it once supporting stuff is done.