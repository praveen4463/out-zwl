# until expectation
staticSitePrefix = staticSite.urlPrefix
# !!NOTE: Some of these tests may fail anytime due to excessive timeout and script execution
# dependency of these until tests, try rerunning if that happens. All written tests have passed
# several times for all supported browser, so while they absolutely work they may still fail.

# setTimeout returns immediately and once timeout expires, runs the given function thus it will be
# used here to simulate actions happening after a delay to let untilXX wait for given timeout.

setElementAccessTimeout(60000)
setPageLoadTimeout(60000)
setScriptTimeout(60000)
# until alert---------------------------------------------------------------------------------------
elemAccess = 3000 # the timeout used in setTimeout for element related untilXX functions
resultFrame = "iframe[name='result']"
assertTrue(getTimeout(timeouts.elemAccess) > elemAccess)

openUrl("https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout")
# script shows alert after elemAccess time has passed, asynchronously
executeScript(format("window.setTimeout(window.alert, %s, 'i am done');", elemAccess))
# to confirm that after executeScript returns, there is no alert present and a wait is required.
assertThrows(exceptions.noAlertPresentEx, acceptAlert())
untilAlertPresent()
acceptAlert() # shouldn't throw proves that untilAlert.. waited until it saw an alert.

# enabled/visible/removed/selections----------------------------------------------------------------
#openUrl("https://jsfiddle.net/praveen4463/0afkonjd/")
openUrl(staticSitePrefix + "selectable_elements_c.html")
switchFrame(resultFrame)
chk1 = findElement("#chk1")
chk2 = findElement("#chk2")
chk3 = findElement("#chk3")
all = [chk1, chk2, chk3]

# !!! important, take a note that if 'arguments' accessed inside anonymous function body, drivers
# can't replace them with provided arguments. Thus keeping them out of it.
hideAll = format(`const arg0 = arguments[0], arg1 = arguments[1], arg2 = arguments[2];
  window.setTimeout(function() {
    arg0.style.display = 'none';
    arg1.style.display = 'none';
    arg2.style.display = 'none';
  }, %s)`, elemAccess)
# lets hide all
executeScript(hideAll, chk1, chk2, chk3)
# to confirm after executeScript returns, element is not yet hidden and a wait is required
assertTrue(allElementsDisplayed(all))
# not using 'all' but multi selector to verify it works, will use 'all' in other related untilXX
# that extends the same class.
untilAllInvisible("input[type='checkbox']")
assertFalse(anyElementDisplayed(all))

showAll = format(`const arg0 = arguments[0], arg1 = arguments[1], arg2 = arguments[2];
  window.setTimeout(function() {
    arg0.style.display = '';
    arg1.style.display = '';
    arg2.style.display = '';
  }, %s)`, elemAccess)
executeScript(showAll, chk1, chk2, chk3)
assertFalse(anyElementDisplayed(all))
untilAllVisible(all)
assertTrue(allElementsDisplayed(all))

disableAll = format(`const arg0 = arguments[0], arg1 = arguments[1], arg2 = arguments[2];
  window.setTimeout(function() {
    arg0.disabled = true;
    arg1.disabled = true;
    arg2.disabled = true;
  }, %s)`, elemAccess)
executeScript(disableAll, chk1, chk2, chk3)
assertTrue(allElementsEnabled(all))
untilAllDisabled(all)
assertFalse(anyElementEnabled(all))

enableAll = format(`const arg0 = arguments[0], arg1 = arguments[1], arg2 = arguments[2];
  window.setTimeout(function() {
    arg0.disabled = false;
    arg1.disabled = false;
    arg2.disabled = false;
  }, %s)`, elemAccess)
executeScript(enableAll, chk1, chk2, chk3)
assertFalse(anyElementEnabled(all))
untilAllEnabled(chk1, chk2, chk3)
assertTrue(allElementsEnabled(all))

removeAll = format(`const arg0 = arguments[0], arg1 = arguments[1], arg2 = arguments[2];
  window.setTimeout(function() {
    document.body.removeChild(arg0);
    document.body.removeChild(arg1);
    document.body.removeChild(arg2);
  }, %s)`, elemAccess)
executeScript(removeAll, chk1, chk2, chk3)
assertTrue(elementExists("#chk1"))
untilAllRemoved("input[type='checkbox']")
assertFalse(elementExists("#chk1"))

refresh() # bring back original state
switchFrame(resultFrame)
chk1 = findElement("#chk1")
chk2 = findElement("#chk2")
chk3 = findElement("#chk3")
all = [chk1, chk2, chk3]

checkAll = format(`const arg0 = arguments[0], arg1 = arguments[1], arg2 = arguments[2];
  window.setTimeout(function() {
    arg0.checked = true;
    arg1.checked = true;
    arg2.checked = true;
  }, %s)`, elemAccess)
executeScript(checkAll, chk1, chk2, chk3)
assertFalse(anyElementSelected(all))
untilAllSelectionsAre(true, "input[type='checkbox']")
assertTrue(allElementsSelected(all))

uncheckOne = format(`const arg0 = arguments[0];
  window.setTimeout(function() {
    arg0.checked = false;
  }, %s)`, elemAccess)
executeScript(uncheckOne, chk1)
assertTrue(isElementSelected(chk1))
untilAnySelectionIs(false, all)
assertFalse(isElementSelected(chk1))

uncheckTwo = format(`const arg0 = arguments[0], arg1 = arguments[1]
  window.setTimeout(function() {
    arg0.checked = false;
    arg1.checked = false;
  }, %s)`, elemAccess)
executeScript(uncheckTwo, chk2, chk3)
assertTrue(allElementsSelected(chk2, chk3))
untilAllSelectionsAre(false, chk2, chk3)
assertFalse(anyElementSelected(all))

checkOne = format(`const arg0 = arguments[0];
  window.setTimeout(function() {
    arg0.checked = true;
  }, %s)`, elemAccess)
executeScript(checkOne, chk1)
assertFalse(isElementSelected(chk1))
untilAnySelectionIs(true, "input[type='checkbox']")
assertTrue(isElementSelected(chk1))

executeScript(uncheckOne, chk1)
assertTrue(isElementSelected(chk1))
untilSelectionIs(chk1, false)
assertFalse(isElementSelected(chk1))

executeScript(checkOne, chk1)
assertFalse(isElementSelected(chk1))
untilSelectionIs(chk1, true)
assertTrue(isElementSelected(chk1))

hideOne = format(`const arg0 = arguments[0];
  window.setTimeout(function() {
    arg0.style.display = 'none';
  }, %s)`, elemAccess)
executeScript(hideOne, chk1)
assertTrue(isElementDisplayed(chk1))
untilInvisible(chk1)
assertFalse(isElementDisplayed(chk1))

showOne = format(`const arg0 = arguments[0];
  window.setTimeout(function() {
    arg0.style.display = '';
  }, %s)`, elemAccess)
executeScript(showOne, chk1)
assertFalse(isElementDisplayed(chk1))
untilVisible(chk1)
assertTrue(isElementDisplayed(chk1))

disableOne = format(`const arg0 = arguments[0];
  window.setTimeout(function() {
    arg0.disabled = true;
  }, %s)`, elemAccess)
executeScript(disableOne, chk1)
assertTrue(isElementEnabled(chk1))
untilDisabled(chk1)
assertFalse(isElementEnabled(chk1))

enableOne = format(`const arg0 = arguments[0];
  window.setTimeout(function() {
    arg0.disabled = false;
  }, %s)`, elemAccess)
executeScript(enableOne, chk1)
assertFalse(isElementEnabled(chk1))
untilEnabled(chk1)
assertTrue(isElementEnabled(chk1))

removeOne = format(`const arg0 = arguments[0];
  window.setTimeout(function() {
    document.body.removeChild(arg0);
  }, %s)`, elemAccess)
executeScript(removeOne, chk1)
assertTrue(elementExists("#chk1"))
untilRemoved("#chk1")
assertFalse(elementExists("#chk1"))

refresh()
switchFrame(resultFrame)
untilStale(chk2)
untilStale(chk3)
if browser.name == "IE" {
  assertTrue(!elementExists(chk2) && !elementExists(chk3))
} else {
  assertTrue(isStale(chk2) && isStale(chk3))
}

chk1 = findElement("#chk1")
chk2 = findElement("#chk2")
chk3 = findElement("#chk3")
all = [chk1, chk2, chk3]

# attribute----------------------------------------------------------------------------------------
executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.setAttribute("data", "was there anything useful?");
    }, %s)`, elemAccess),
  chk1
)
assertTrue(length(getElementAttributeOrCssValue(chk1, "data")) == 0)
untilAttributeValueContains(chk1, "data", "anything")
assertTrue(getElementAttributeOrCssValue(chk1, "data") == "was there anything useful?")

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.style["margin-left"] = "100px";
    }, %s)`, elemAccess),
  chk1
)
untilAttributeValueIs(chk1, "margin-left", "100px")
assertTrue(getElementAttributeOrCssValue(chk1, "margin-left") == "100px")

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.setAttribute("secret", "Ghh89df90");
    }, %s)`, elemAccess),
  chk1
)
assertTrue(length(getElementAttributeOrCssValue(chk1, "secret")) == 0)
untilAttributeValueLike(chk1, "secret", "^[a-zA-Z0-9]+$")
assertTrue(getElementAttributeOrCssValue(chk1, "secret") == "Ghh89df90")

# execute a script that will set an empty attribute immediately, with untilAttributeValueNonEmpty,
# wait for a short duration and expect it fail. Then execute another script with
# setTimeout that sets non empty value.
executeScript("arguments[0].setAttribute(\"rel\", \"   \");", chk1)
assertThrows(exceptions.timeoutEx,
    untilAttributeValueNonEmpty(chk1, "rel", untilFlt(1000)))
executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.setAttribute("rel", "hello");
    }, %s)`, elemAccess),
  chk1
)
assertTrue(length(trim(getElementAttributeOrCssValue(chk1, "rel"))) == 0)
untilAttributeValueNonEmpty(chk1, "rel")
assertTrue(length(trim(getElementAttributeOrCssValue(chk1, "rel"))) > 0)

# value---------------------------------------------------------------------------------------------

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.value = "agree to consent";
    }, %s)`, elemAccess),
  chk1
)
assertTrue(getElementValue(chk1) == "on") # checkbox's default value
untilValueContains(chk1, "consent")
assertTrue(getElementValue(chk1) == "agree to consent")

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.value = "p#:8987898989";
    }, %s)`, elemAccess),
  chk2
)
assertTrue(getElementValue(chk2) == "on")
untilValueLike(chk2, "[8-9][0-9]{9}$")
assertTrue(getElementValue(chk2) == "p#:8987898989")

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.value = "accept cookies";
    }, %s)`, elemAccess),
  chk2
)
assertTrue(getElementValue(chk2) == "p#:8987898989")
untilValueIs(chk2, "accept cookies")
assertTrue(getElementValue(chk2) == "accept cookies")

executeScript("arguments[0].value = \"  \";", chk3)
assertThrows(exceptions.timeoutEx,
    untilValueNonEmpty(chk3, untilFlt(elemAccess)))
executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.value = "privacy policy";
    }, %s)`, elemAccess),
  chk3
)
assertTrue(length(trim(getElementValue(chk3))) == 0)
assertTrue(length(trim(untilValueNonEmpty(chk3))) > 0)

# text----------------------------------------------------------------------------------------------
#openUrl("https://jsfiddle.net/praveen4463/nb9a215e/")
openUrl(staticSitePrefix + "until_text_c.html")
switchFrame(resultFrame)
div1 = findElement("#div1")
div2 = findElement("#div2")
div3 = findElement("#div3")
div4 = findElement("#div4")

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.innerHTML = "This may be a long <br/> text with some breaks <br/> in line, watch it.";
    }, %s)`, elemAccess),
  div1
)
assertTrue(length(trim(getElementText(div1))) == 0)
untilTextContains(div1, "watch")
assertTrue(startsWith(getElementText(div1), "This may be a long"))

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.innerHTML = "Are you going there tomorrow? <br/> Could you let me know once you leave?";
    }, %s)`, elemAccess),
  div2
)
assertTrue(length(trim(getElementText(div2))) == 0)
expectedText = `Are you going there tomorrow?
Could you let me know once you leave?`
untilTextIs(div2, expectedText)
assertTrue(startsWith(getElementText(div2), "Are you going there tomorrow"))

executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.innerHTML = "The generated id is: #45868858AB";
    }, %s)`, elemAccess),
  div3
)
assertTrue(length(trim(getElementText(div3))) == 0)
untilTextLike(div3, "#[1-9][A-B0-9]{9}$")
assertTrue(startsWith(getElementText(div3), "The generated id is"))

assertThrows(exceptions.timeoutEx,
    untilTextNonEmpty(div4, untilFlt(1000)))
executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      arg0.innerHTML = "anything but empty";
    }, %s)`, elemAccess),
  div4
)
assertTrue(length(trim(getElementText(div4))) == 0)
assertTrue(length(trim(untilTextNonEmpty(div4))) > 0)

# Total elements------------------------------------------------------------------------------------
allDiv = "div"

executeScript(removeOne, div1)
assertTrue(size(findElements(allDiv)) == 4)
untilTotalElementsEQ(3, allDiv, by.tagName)
assertTrue(size(findElements(allDiv)) == 3)

executeScript(removeOne, div2)
assertTrue(size(findElements(allDiv)) == 3)
untilTotalElementsLT(3, allDiv, by.tagName)
assertTrue(size(findElements(allDiv)) == 2)

executeScript(
  format(`
    window.setTimeout(function() {
      let div5 = document.createElement("div");
      div5.id = "div5";
      document.body.appendChild(div5);
    }, %s)`, elemAccess)
)
assertTrue(size(findElements(allDiv)) == 2)
untilTotalElementsGT(2, allDiv, by.tagName)
assertTrue(size(findElements(allDiv)) == 3)

# Total windows-------------------------------------------------------------------------------------
pageLoad = 3000 # the timeout used in setTimeout for page load related untilXX functions
assertTrue(getTimeout(timeouts.pageLoad) > pageLoad)
currentWinId = getCurrentWinId()
executeScript(
  format(`
    window.setTimeout(function() {
      document.querySelectorAll("a:nth-of-type(1)")[0].click();
      document.querySelectorAll("a:nth-of-type(2)")[0].click();
    }, %s)`, pageLoad)
)
assertTrue(size(getAllWinIds()) == 1)
untilTotalWindowsAre(3)
assertTrue(size(getAllWinIds()) == 3)
# close others and switch to original cause the js clicks opened new windows while wd still seeing
# the original and future commands will be run on that.
for win in getAllWinIds() {
  if (win != currentWinId) {
    switchWin(win)
    close()
  }
}
switchWin(currentWinId)

# Url and Title-------------------------------------------------------------------------------------
# This conditional click had to be done because of the wrong rendering of mozilla page on IE and perhaps due to that
# IE driver seeing the anchors as not displayed, the only quick way is to do a js click.
openUrl("https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute")
aToClick = findElement(".quick-links > div:nth-child(2) > ol > li:nth-child(3) > details > ol > li:nth-child(1) > a")
if browser.name == "IE" {
  executeScript("arguments[0].click();", aToClick)
} else {
  click(aToClick)
}
untilUrlContains("accessKey")
assertTrue(containsString(getTitle(), "Element.accessKey"))

aToClick = findElement(".quick-links > div:nth-child(2) > ol > li:nth-child(3) > details > ol > li:nth-child(2) > a")
if browser.name == "IE" {
  executeScript("arguments[0].click();", aToClick)
} else {
  click(aToClick)
}
untilTitleContains("Element.attributes")
assertTrue(startsWith(getTitle(), "Element.attributes - Web APIs"))

aToClick = findElement(".quick-links > div:nth-child(2) > ol > li:nth-child(3) > details > ol > li:nth-child(3) > a")
if browser.name == "IE" {
  executeScript("arguments[0].click();", aToClick)
} else {
  click(aToClick)
}
untilUrlIs("https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount")
assertTrue(getCurrentUrl() ==
    "https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount")

aToClick = findElement(".quick-links > div:nth-child(2) > ol > li:nth-child(3) > details > ol > li:nth-child(4) > a")
if browser.name == "IE" {
  executeScript("arguments[0].click();", aToClick)
} else {
  click(aToClick)
}
untilTitleIs("ParentNode.lastElementChild - Web APIs | MDN")
assertTrue(getTitle() == "ParentNode.lastElementChild - Web APIs | MDN")

aToClick = findElement(".quick-links > div:nth-child(2) > ol > li:nth-child(3) > details > ol > li:nth-child(2) > a")
if browser.name == "IE" {
  executeScript("arguments[0].click();", aToClick)
} else {
  click(aToClick)
}
untilUrlLike("children$")
assertTrue(startsWith(getTitle(), "ParentNode.children"))

# frame---------------------------------------------------------------------------------------------
openUrl("https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval")
# note that this is explicit navigation and thus webdriver won't wait for page to load.
aToClick = findElement(".quick-links > div:nth-child(2) > ol > li:nth-child(3) > details > ol > li:nth-child(9) > a")
if browser.name == "IE" {
  executeScript("arguments[0].click();", aToClick)
} else {
  click(aToClick)
}

# switched to frame doesn't always work correctly with IE when index is used, sometimes it work, sometimes it
# just remain on top window and treat it as switched to frame. Don't want to to test this in IE.
if browser.name != "IE" {
  # If we try switching to page's frame using selector it will succeed without an
  # explicit wait cause the frame will be searched using a wait automatically but if we try using
  # index, it may throw exception as there is no frame available immediately after clicking the link.
  untilSwitchedToFrame(0)
  assertTrue(startsWith(getElementText("button:first-of-type"), "Show an alert"))
}

# js------------------------------------------------------------------------------------------------
js = 4000 # the timeout used in setTimeout for js related untilXX functions
assertTrue(getTimeout(timeouts.js) > js)
#openUrl("https://jsfiddle.net/praveen4463/0afkonjd/") # any page works
openUrl(staticSitePrefix + "selectable_elements_c.html")
executeScript(
  format(`
    window.setTimeout(function() {
      let div1 = document.createElement("div");
      div1.id = "div1";
      document.body.appendChild(div1);
    }, %s)`, js)
)
getIdScript = "return document.getElementById(\"div1\").id;"
# should throw js exception if div1 is
# accessed immediately before setTimeout has added it, adding the wait instead should resolve it.
assertThrows(exceptions.jsEx, assertTrue(executeScript(getIdScript) == "div1"))
assertTrue(untilJsReturnsAValue(getIdScript) == "div1")

# same script can be used with untilJsThrowsNoException
executeScript(
  format(`
    window.setTimeout(function() {
      let div2 = document.createElement("div");
      div2.id = "div2";
      document.body.appendChild(div2);
    }, %s)`, js)
)
getIdScript = "return document.getElementById(\"div2\").id;"
untilJsThrowsNoException(getIdScript)
assertTrue(executeScript(getIdScript) == "div2")

# flt-----------------------------------------------------------------------------------------------
originalElemAccess = getTimeout(timeouts.elemAccess)
# switch frame before resetting timeout
#openUrl("https://jsfiddle.net/praveen4463/0afkonjd/")
openUrl(staticSitePrefix + "selectable_elements_c.html")
switchFrame(resultFrame)
# imagine user set element access timeout to 1sec for some code
setElementAccessTimeout(1000)
# now they need to check some element being removed from page, but it may take more than what they
# set as element access above. For only this particular action, they want to give a custom timeout.
waitFor = 6000
triggerRemoveAfter = 5000
chk1 = findElement("#chk1")
executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      document.body.removeChild(arg0);
    }, %s)`, triggerRemoveAfter)
  , chk1
)
# if we don't use flt, a timeout should occur.
assertThrows(exceptions.timeoutEx, untilRemoved("#chk1"))
# element is still not removed
assertTrue(elementExists("#chk1"))
# pass on flt and the custom wait
untilRemoved("#chk1", untilFlt(waitFor))
# now it should be removed
assertFalse(elementExists("#chk1"))

# another test for poll interval in flt
# wait for lesser than 500 which is the default poll time so that we can be sure our untilXX did
# wait for lesser than that when we took a custom wait and poll time.
waitFor = 400
poll = 20
triggerRemoveAfter = 100
chk2 = findElement("#chk2")
executeScript(
  format(`const arg0 = arguments[0];
    window.setTimeout(function() {
      document.body.removeChild(arg0);
    }, %s)`, triggerRemoveAfter)
  , chk2
)
start = instant()
untilStale(chk2, untilFlt(waitFor, poll))
spent = elapsed(start)
if browser.name == "IE" {
  assertTrue(!elementExists(chk2))
} else {
  assertTrue(isStale(chk2))
}
assertTrue(spent <= waitFor) # if poll time was correctly set, spent can't be more than waitFor

# restore element access
setElementAccessTimeout(originalElemAccess)
# click---------------------------------------------------------------------------------------------
#openUrl("https://jsfiddle.net/praveen4463/wupqetgh/")
openUrl(staticSitePrefix + "button_and_overlay_c.html")
switchFrame(resultFrame)
overlay = findElement(".o")
button = findElement(".b")
executeScript(hideOne, overlay)
# if click is made right now, elemClickInterceptedEx should occur
assertThrows(exceptions.elemClickInterceptedEx, click(button))
# wait until overlay goes off and clicked
untilClicked(button)
assertTrue(getElementValue("#hd1") == 1) # tells that it clicked