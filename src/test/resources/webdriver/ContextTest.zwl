# context functions
staticSitePrefix = staticSite.urlPrefix
# open more than one window, confirm last one can't be closed
mozAttrUrl = "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes"
openUrl(mozAttrUrl)
allWins = getAllWinIds()
assertTrue(size(allWins) == 1)
close() # shouldn't close the lone window
allWins = getAllWinIds()
assertTrue(size(allWins) == 1)
dragEventUrl = "https://developer.mozilla.org/en-US/docs/Web/API/Document/drag_event"
openUrlNewWin(dragEventUrl)
allWins = getAllWinIds()
assertTrue(size(allWins) == 2)
close() # should close now
allWins = getAllWinIds()
assertTrue(size(allWins) == 1) # only one win is now remaining
# we need to now switch webdriver to the other window remaining, browser will auto focus the other
# window but webdriver don't know this, it thinks that current window is closed.
switchWin(allWins[0])
assertTrue(getCurrentUrl() == mozAttrUrl) # and that is the first one opened

# open url, keep it's winId, open another win and new url. now switch to the previous win using
# saved winId
mozAttrWin = getCurrentWinId() # current win already has mozAttrUrl
openUrlNewWin(dragEventUrl)
assertTrue(getCurrentUrl() == dragEventUrl)
switchWin(mozAttrWin)
assertTrue(getCurrentUrl() == mozAttrUrl)
close() # closes mozAttrWin, dragEventUrl win remains, switch to. Switching after close is important
# to do any operation so that webdriver knows there is a current context
switchWin(getAllWinIds()[0]) # switch to dragEventUrl win

# new window only
newWin("window")
openUrl(mozAttrUrl)
allWins = getAllWinIds()
assertTrue(size(allWins) == 2)
assertTrue(getCurrentUrl() == mozAttrUrl)
close() # closes mozAttrUrl win, dragEventUrl win remains
switchWin(getAllWinIds()[0]) # switch to dragEventUrl win

# switch frame using index, switch back and forth to test switchParentFrame and switchWin without
# parameters that switches to default content.
#openUrl("https://jsfiddle.net/praveen4463/w0eg4azx/")
openUrl(staticSitePrefix + "long_scroll_c.html")
untilSwitchedToFrame(0) # when not using frame selector, 'until' is needed.
button = findElement("input")
assertTrue(isValidElemId(button))
# parent frame
switchParentFrame()
wrapper = findElements(".wrapper")
assertTrue(size(wrapper) == 1)
switchFrame(0)
button = findElement("input")
assertTrue(isValidElemId(button))
switchWin()
wrapper = findElements(".wrapper")
assertTrue(size(wrapper) == 1)

# resizing
maximizeWin() # maximize if it's not
# note that in current maximized state x and y come up as negative values, in some browsers like chrome whatever width
# we set to window, it gets increased by 16px, i don't know why. To let it work I will use >= condition and will
# investigate this later.

setWinPosition(300, 600)
m = getWinPosition()
assertTrue(m.x == 300 && m.y == 600)
maximizeWin() # reset

setWinSize(500, 500)
m = getWinSize()
assertTrue(m.width >= 500 && m.height == 500)
maximizeWin() # reset

setWinPosition(100, 100)
moveWinBy(100, 200)
m = getWinPosition()
assertTrue(m.x == 200 && m.y == 300)
maximizeWin() # reset

setWinSize(500, 500)
resizeWinBy(100, 100)
m = getWinSize()
assertTrue(m.width >= 600 && m.height == 600)
maximizeWin() # reset

maximizedDimension = getWinSize()
fullScreenWin()
m = getWinSize()
# in windows, on full screen the window takes exact screen position of 0,0 whereas in maximize it's negative
# thus the width in full screen becomes lesser than width in
# maximize. In mac width is same thus take <= to let it work in both OS.
assertTrue(m.width <= maximizedDimension.width && m.height > maximizedDimension.height)