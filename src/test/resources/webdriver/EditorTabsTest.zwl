# Tests expect one file with at least 4 tests loaded into IDE
# These tests are ready to load into IDE when it's up and running, every test runs independently.
# TODO: fix tests, globals and use new by's

#====================================================================
#### Test: clicking on a version opens temporary tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM) # first file
fileName = getElementText(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME))
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM) # all tests in file
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM) # first version in a test
click(version)
tabs = findElements(globals.ROLE_TAB_BUTTON) # all tabs
assertTrue(size(tabs) == 1)
# a temp tab has font-style of FONT_TEMP_TAB
assertTrue(getElementCssValue(
    findElementFromElement(tabs[0], globals.SELECTOR_TAB_TEXT_NODE), "font-style")
        == globals.FONT_TEMP_TAB)
# assert that the tab belongs to clicked version
assertTrue(
  getElementAttribute(findElementFromElement(tabs[0], globals.TEST_ID_TAB), "title") ==
      format(
        globals.TITLE_TAB_FORMAT,
        fileName,
        getElementText(findElementFromElement(tests[0], globals.TEST_ID_TEST_TREE_ITEM_NAME)),
        getElementText(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
      )
)
# a temp tab is replaced when another tab is opened, open another version in another test, clicking
# it should replace tab of previous version
click(tests[1])
version = findElementFromElement(tests[1], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
tabs = findElements(globals.ROLE_TAB_BUTTON) # all tabs
assertTrue(size(tabs) == 1)
# assert that the tab belongs to clicked version
assertTrue(
  getElementAttribute(findElementFromElement(tabs[0], globals.TEST_ID_TAB), "title") ==
      format(
        globals.TITLE_TAB_FORMAT,
        fileName,
        getElementText(findElementFromElement(tests[1], globals.TEST_ID_TEST_TREE_ITEM_NAME)),
        getElementText(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
      )
)

#====================================================================
#### Test: clicking on version having temporary tab opened has no effect on it's tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
# now click again
click(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(getElementCssValue(
    findElementFromElement(tabs[0], globals.SELECTOR_TAB_TEXT_NODE), "font-style")
        == globals.FONT_TEMP_TAB)
assertTrue(size(findElements(globals.ROLE_TAB_BUTTON)) == 1)

#====================================================================
#### Test: double clicking on version having temporary tab opened turns tab permanent
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
# first click
click(version)
# now dbl click
dblClick(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
# tab font should turn normal
assertTrue(getElementCssValue(
    findElementFromElement(tabs[0], globals.SELECTOR_TAB_TEXT_NODE), "font-style") == "normal")
assertTrue(size(tabs) == 1)
# to make sure tab is really permanent, click some other version, if this is not temp anymore, 2
# tabs should open else it should get replaced which fails the test.
click(tests[1])
click(findElementFromElement(tests[1], globals.TEST_ID_VERSION_TREE_ITEM))
assertTrue(size(findElements(globals.ROLE_TAB_BUTTON)) == 2)

#====================================================================
#### Test: A temporary tab could also be made permanent by dbl clicking on it's tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
# first click
click(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
dblClick(tabs[0])
assertTrue(getElementCssValue(
    findElementFromElement(tabs[0], globals.SELECTOR_TAB_TEXT_NODE), "font-style") == "normal")
# make sure tab is really permanent
click(tests[1])
click(findElementFromElement(tests[1], globals.TEST_ID_VERSION_TREE_ITEM))
assertTrue(size(findElements(globals.ROLE_TAB_BUTTON)) == 2)

#====================================================================
#### Test: Dbl clicking on a version opens permanent tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(getElementCssValue(
    findElementFromElement(tabs[0], globals.SELECTOR_TAB_TEXT_NODE), "font-style") == "normal")
click(tests[1])
click(findElementFromElement(tests[1], globals.TEST_ID_VERSION_TREE_ITEM))
assertTrue(size(findElements(globals.ROLE_TAB_BUTTON)) == 2)

#====================================================================
#### Test: single or dbl clicking on version having permanent tab opened has no effect on it's tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
# single click
click(version)
# dbl click
dblClick(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(getElementCssValue(
    findElementFromElement(tabs[0], globals.SELECTOR_TAB_TEXT_NODE), "font-style") == "normal")
assertTrue(size(tabs) == 1)

#====================================================================
#### Test: new tab has it's own panel
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
fileName = getElementText(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME))
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
breadcrumb = findElement(globals.TEST_ID_BREADCRUMB_TAB_PANEL)
assertTrue(getElementText(breadcrumb) ==
    format(
      globals.BREADCRUMB_FORMAT,
      fileName,
      getElementText(findElementFromElement(tests[0], globals.TEST_ID_TEST_TREE_ITEM_NAME)),
      getElementText(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
    )
)
# open another version
click(tests[1])
version = findElementFromElement(tests[1], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
# react doesn't remove old breadcrumb but just updates it in DOM, thus we can use same reference
assertTrue(getElementText(breadcrumb) ==
    format(
      globals.BREADCRUMB_FORMAT,
      fileName,
      getElementText(findElementFromElement(tests[1], globals.TEST_ID_TEST_TREE_ITEM_NAME)),
      getElementText(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
    )
)
# open another version
click(tests[2])
version = findElementFromElement(tests[2], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
assertTrue(getElementText(breadcrumb) ==
    format(
      globals.BREADCRUMB_FORMAT,
      fileName,
      getElementText(findElementFromElement(tests[2], globals.TEST_ID_TEST_TREE_ITEM_NAME)),
      getElementText(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
    )
)

#====================================================================
#### Test: new tab opens next to selected tab and becomes selected tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
fileName = getElementText(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME))
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
click(tests[0])
version = findElementFromElement(tests[0], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
# tab should be selected as it's the only tab, a tab is selected when it has colored bottom and
# highlighted text
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[0], globals.FOCUSED_TAB_COLOR_PROP)
))
assertTrue(getElementCssValue(findElementFromElement(tabs[0], "*[data-testid=tabContainer]")
    , "opacity") == 0.87)
# open another tab
click(tests[1])
version = findElementFromElement(tests[1], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
# assert that tab opened at index = 1 (which should be the new tab) belongs to the current version
# to make sure the new tab opened next to last selected tab (since new tab is at index = 1) and
# we're checking the selection of the intended tab
assertTrue(
  getElementAttribute(findElementFromElement(tabs[1], globals.TEST_ID_TAB), "title") ==
      format(
        globals.TITLE_TAB_FORMAT,
        fileName,
        getElementText(findElementFromElement(tests[1], globals.TEST_ID_TEST_TREE_ITEM_NAME)),
        getElementText(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
      )
)
# tab at index 1 should be selected (match just color, no need to match both the thing repeatedly)
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[1], globals.FOCUSED_TAB_COLOR_PROP)
))
# previous tab at index 0 should get deselected
assertTrue(colorMatches(
  colors.black, getElementCssValue(tabs[0], globals.FOCUSED_TAB_COLOR_PROP)
))
assertTrue(getElementCssValue(findElementFromElement(tabs[0], "*[data-testid=tabContainer]")
    , "opacity") == 0.6)
# now select tab at index 0 to let new tab stuff between 0 and 1
click(tabs[0])
# assert that now 0 is selected and 1 deselected
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[0], globals.FOCUSED_TAB_COLOR_PROP)
))
assertTrue(colorMatches(
  colors.black, getElementCssValue(tabs[1], globals.FOCUSED_TAB_COLOR_PROP)
))
# open a new tab
click(tests[2])
version = findElementFromElement(tests[2], globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version)
tabs = findElements(globals.ROLE_TAB_BUTTON)
# assert that new tab opened at index = 1 rather than 2 cause the selected was index 0
assertTrue(
  getElementAttribute(findElementFromElement(tabs[1], globals.TEST_ID_TAB), "title") ==
      format(
        globals.TITLE_TAB_FORMAT,
        fileName,
        getElementText(findElementFromElement(tests[2], globals.TEST_ID_TEST_TREE_ITEM_NAME)),
        getElementText(findElementFromElement(version, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
      )
)
# tab at index 1 should be selected
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[1], globals.FOCUSED_TAB_COLOR_PROP)
))
# previous tab at index 0 should get deselected
assertTrue(colorMatches(
  colors.black, getElementCssValue(tabs[0], globals.FOCUSED_TAB_COLOR_PROP)
))

#====================================================================
#### Test: navigating versions switches their tabs
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
fileName = getElementText(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME))
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
# open several versions
test1 = tests[0]
click(test1)
version1 = findElementFromElement(test1, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version1)
test2 = tests[1]
click(test2)
version2 = findElementFromElement(test2, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version2)
test3 = tests[2]
click(test3)
version3 = findElementFromElement(test3, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version3)
tabs = findElements(globals.ROLE_TAB_BUTTON)
# current selected tab is index 2
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[2], globals.FOCUSED_TAB_COLOR_PROP)
))
# switch to tab at index 1
click(version2)
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[1], globals.FOCUSED_TAB_COLOR_PROP)
))
# switch to tab at index 0
click(version1)
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[0], globals.FOCUSED_TAB_COLOR_PROP)
))
# switch to tab at index 2
click(version3)
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[2], globals.FOCUSED_TAB_COLOR_PROP)
))

#====================================================================
#### Test: closing a selected tab sends focus to left adjacent if there is one on left
# open at least 4 tabs for this test
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
test1 = tests[0]
click(test1)
version1 = findElementFromElement(test1, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version1)
test2 = tests[1]
click(test2)
version2 = findElementFromElement(test2, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version2)
test3 = tests[2]
click(test3)
version3 = findElementFromElement(test3, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version3)
test4 = tests[3]
click(test4)
version4 = findElementFromElement(test4, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version4)
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(size(tabs) == 4)
# 4th tab should be selected one
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[3], globals.FOCUSED_TAB_COLOR_PROP)
))
# close 4th
click(findElementFromElement(tabs[3], globals.TEST_ID_CLOSE_ICON))
# 3rd should get selected
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[2], globals.FOCUSED_TAB_COLOR_PROP)
))

#====================================================================
#### Test: closing a selected tab sends focus to right adjacent if there is none of left
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
test1 = tests[0]
click(test1)
version1 = findElementFromElement(test1, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version1)
test2 = tests[1]
click(test2)
version2 = findElementFromElement(test2, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version2)
test3 = tests[2]
click(test3)
version3 = findElementFromElement(test3, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version3)
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(size(tabs) == 3)
# first select 1st tab
click(tabs[0])
# now close it
click(findElementFromElement(tabs[0], globals.TEST_ID_CLOSE_ICON))
# 2nd should get selected
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[1], globals.FOCUSED_TAB_COLOR_PROP)
))

#====================================================================
#### Test: switching tabs shows tab panel of focused tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
fileName = getElementText(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME))
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
test1 = tests[0]
click(test1)
version1 = findElementFromElement(test1, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version1)
test2 = tests[1]
click(test2)
version2 = findElementFromElement(test2, globals.TEST_ID_VERSION_TREE_ITEM)
dblClick(version2)
tabs = findElements(globals.ROLE_TAB_BUTTON)
# assert tab panel for version2's tab is shown
breadcrumb = findElement(globals.TEST_ID_BREADCRUMB_TAB_PANEL)
assertTrue(getElementText(breadcrumb) ==
    format(
      globals.BREADCRUMB_FORMAT,
      fileName,
      getElementText(findElementFromElement(test2, globals.TEST_ID_TEST_TREE_ITEM_NAME)),
      getElementText(findElementFromElement(version2, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
    )
)
# now click on version 1's tab and see the tab panel change to version1
click(tabs[0])
assertTrue(getElementText(breadcrumb) ==
    format(
      globals.BREADCRUMB_FORMAT,
      fileName,
      getElementText(findElementFromElement(test1, globals.TEST_ID_TEST_TREE_ITEM_NAME)),
      getElementText(findElementFromElement(version1, globals.TEST_ID_VERSION_TREE_ITEM_NAME))
    )
)

#====================================================================
#### Test: deleting a single version deletes it's tab respecting left/right adjacent selection
# Note: Following are test cases related to this test, not written due to time constraint
# another test, version that is not selected version is deleted, no change in selection.
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
test = tests[0]
requiredVersions = 5 # test needs 4 deletable versions, thus 5 including the latest one
click(test)
versions = findElementsFromElement(test, globals.TEST_ID_VERSION_TREE_ITEM)
if size(versions) < requiredVersions {
  performAction(move(findElementFromElement(test, globals.TEST_ID_TEST_TREE_ITEM_CONTENT)))
  newVersionButton = findElementFromElement(test, globals.BUTTON_NEW_VERSION_TREE_ITEM)
  for i = 1 to requiredVersions - size(versions) {
    # mouse should remain at new version button while keyboard types and presses enter in sequence,
    # thus not loosing hover on the test element.
    click(newVersionButton)
    typeActive(uuid(), keys.enter)
    sleep(20)
    # this wait helps slowing down wd, sometimes too fast wildly clicking and submitting causes input box to not appear.
  }
  # wait until all new versions are added
  # TODO: this v2 function should be change to original variant once original has been updated to accept
  # all required arguments.
  versions = untilTotalElementsGT(requiredVersions - 1, test, globals.TEST_ID_VERSION_TREE_ITEM)
}
# new versions added, let's open all of them excluding latest
for v in versions {
  # exclude latest
  if elementExists(v, globals.TEST_ID_LATEST_VERSION) {
    latestVersion = v
  } else {
    dblClick(v)
  }
}
if exists(latestVersion) {
  removeFrom(versions, latestVersion)
}
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(size(tabs) >= requiredVersions - 1)
version4 = versions[3]
performAction(move(version4))
click(findElementFromElement(version4, globals.BUTTON_DELETE_TREE_ITEM))
click(findElement(globals.BUTTON_DELETE_DIALOG))
# version4 is deleted, deleting tab4, tab3 should be the selected tab
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[2], globals.FOCUSED_TAB_COLOR_PROP)
))
# select tab1
click(tabs[0])
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[0], globals.FOCUSED_TAB_COLOR_PROP)
))
# now delete version1
version1 = versions[0]
performAction(move(version1))
click(findElementFromElement(version1, globals.BUTTON_DELETE_TREE_ITEM))
click(findElement(globals.BUTTON_DELETE_DIALOG))
# version1 is deleted, deleting tab1, tab2 should be the selected tab
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[1], globals.FOCUSED_TAB_COLOR_PROP)
))
assertTrue(size(findElements(globals.ROLE_TAB_BUTTON)) == size(tabs) - 2)

#====================================================================
#### Test: deleting a test having versions selects tab on the left that is not deleting
# Note: there are lot of test cases relating to tabs when a test is deleted, not writing now due to
# time constraint.
# - when selected tab's versions isn't present in deleting test's versions, tabs are removed and
#   no change happens in selection.
# - when selected tab is at index 0 or 1, deleting a test having selected version, selects the
#   tab at first index in remaining tabs
# - when only one tab remains after deleting a test, that becomes selected
# - when selected tab is deleting together with all tabs on the left, just selected first tab in
#   remaining tabs.
# - Unloading a file follows the same rules as above.
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
click(file)
requiredVersions = 3
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
test1 = tests[0]
click(test1)
test1Versions = findElementsFromElement(test1, globals.TEST_ID_VERSION_TREE_ITEM)
if size(test1Versions) < requiredVersions {
  performAction(move(findElementFromElement(test1, globals.TEST_ID_TEST_TREE_ITEM_CONTENT)))
  newVersionButton = findElementFromElement(test1, globals.BUTTON_NEW_VERSION_TREE_ITEM)
  for i = 1 to requiredVersions - size(test1Versions) {
    click(newVersionButton)
    typeActive(uuid(), keys.enter)
    sleep(20)
  }
  test1Versions = untilTotalElementsGT(requiredVersions - 1, test1,
      globals.TEST_ID_VERSION_TREE_ITEM)
}
for v in test1Versions {
  dblClick(v)
}
test2 = tests[1]
click(test2)
test2Versions = findElementsFromElement(test2, globals.TEST_ID_VERSION_TREE_ITEM)
if size(test2Versions) < requiredVersions {
  performAction(move(findElementFromElement(test2, globals.TEST_ID_TEST_TREE_ITEM_CONTENT)))
  newVersionButton = findElementFromElement(test2, globals.BUTTON_NEW_VERSION_TREE_ITEM)
  for i = 1 to requiredVersions - size(test2Versions) {
    click(newVersionButton)
    typeActive(uuid(), keys.enter)
    sleep(20)
  }
  test2Versions = untilTotalElementsGT(requiredVersions - 1, test2,
      globals.TEST_ID_VERSION_TREE_ITEM)
}
for v in test2Versions {
  dblClick(v)
}
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(size(tabs) == requiredVersions * 2)
# last tab is selected which is of test2, let's delete test2, deleting all it's versions
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[(requiredVersions * 2) - 1],
      globals.FOCUSED_TAB_COLOR_PROP)
))
performAction(
  move(findElementFromElement(test2, globals.TEST_ID_TEST_TREE_ITEM_CONTENT))
  # why not move(test2)? rather than moving mouse onto test element (li), we should move it on the inner
  # element that has it's content. This is because test element when expanded contains it's versions
  # too so when move is called, webdriver finds the middle of the element which may point to either
  # test or version. For precise mouse hovering, hover it on test element only rather than the root
  # of it.
)
click(findElementFromElement(test2, globals.BUTTON_DELETE_TREE_ITEM))
click(findElement(globals.BUTTON_DELETE_DIALOG))
tabs = findElements(globals.ROLE_TAB_BUTTON)
assertTrue(size(tabs) == requiredVersions)
# last tab should be selected as it was the first on the left of test2's tab that was not deleting
assertTrue(colorMatches(
  globals.FOCUSED_TAB_COLOR, getElementCssValue(tabs[requiredVersions - 1],
      globals.FOCUSED_TAB_COLOR_PROP)
))

#====================================================================
#### Test: renaming version renames it's tab
openUrl(globals.URL_LOCAL)
file = findElementFromElement(globals.ROLE_TREE, globals.TEST_ID_FILE_TREE_ITEM)
fileName = getElementText(findElementFromElement(file, globals.TEST_ID_FILE_TREE_ITEM_NAME))
click(file)
tests = findElementsFromElement(file, globals.TEST_ID_TEST_TREE_ITEM)
test = tests[0]
click(test)
version = findElementFromElement(test, globals.TEST_ID_VERSION_TREE_ITEM)
click(version)
performAction(move(version))
click(findElementFromElement(version, globals.BUTTON_RENAME_TREE_ITEM))
newName = uuid()
typeActive(newName, keys.enter)
breadcrumb = findElement(globals.TEST_ID_BREADCRUMB_TAB_PANEL)
assertTrue(getElementText(breadcrumb) ==
    format(
      globals.BREADCRUMB_FORMAT,
      fileName,
      getElementText(findElementFromElement(test, globals.TEST_ID_TEST_TREE_ITEM_NAME)),
      newName
    )
)

# TODO: pending test
#====================================================================
#### Test: when tabs are switched, versions get selected in explorer