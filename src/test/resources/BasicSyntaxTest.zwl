# Tests the syntax of ZWL.

# Assignments **************************************************************************************

a = 100
assert(a == 100)

b = a + 1
assert(b == 101)

c = a + b + 100
assert(c == 301)

# Function invocation ******************************************************************************

a = format('Hi %s, how are you? Are you free around %s in the evening?', 'praveen', 7)
assert(a == 'Hi praveen, how are you? Are you free around 7 in the evening?')

regex = 'around (?<time>[6-9]) in the evening'
b = substringRegex(a, regex)[0].time
printF("b is: %s", b)
assert(b == 7, 'substringRegex assertion failed')

# if statement *************************************************************************************

a = 123
if a > 200 {
  assert(false)
}

if a < 100 {
  assert(false)
} else if a > 124 {
  assert(false)
} else if a < 124 {
  assert(true)
} else {
  assert(false)
}

if false {
  assert(false)
} else {
  assert(true)
}

# for statements ***********************************************************************************

# for-in with list
c = ''
a = ['are we', 'going there', 'on monday', 'at', 9, '?']
for e in a {
  c = format("%s %s", c, e)
}
assert(trim(c) == 'are we going there on monday at 9 ?', 'for-list assertion failed')

# for-in with map
c = ""
m = {
  event: "party",
  when: "at " + 9
}
for k, v in m {
  c = format("%s %s: %s,", c, k, v)
}
assert(trimEnd(trim(c), ",") == "event: party, when: at 9", "for-map assertion failed")

# for-to
a = 0
for i = 1 to 10 {
  a = a + i
}
assert(a == (1+2+3+4+5+6+7+8+9+10))

# while statement **********************************************************************************

b = -10
c = 0
while b < 0 {
  c = c + b
  b = b + 1
}
assert(c == -(1+2+3+4+5+6+7+8+9+10))

# increment/decrement ******************************************************************************

inc++
assert(inc == 1)

dec--
assert(dec == -1)

inc_exists = 2
inc_exists++
assert(inc_exists == 3)

dec_exists = 2
dec_exists--
assert(dec_exists == 1)

a = 0
b = 0
a = b++
assert(a == 0)
assert(b == 1)

a = -1
b = -1
a = b--
assert(a == -1)
assert(b == -2)

# identifier index and dot notation ****************************************************************

a = [[
  {
    age: 89
  }
]]
assert(a[0][0].age == 89)
assert(a[0][0]["age"] == 89)
assertThrows(exceptions.noSuchMapKeyEx, a[0][0]["name"] == 89)

# map literal with non identifier key
b = {
  "2gh.jh#id": "praveen"
}
assertTrue(b["2gh.jh#id"] == "praveen")

# try-catch ****************************************************************

errorThrownAndCaught = false
finallyRan = false
exMsg = ''
try {
  print('this is try')
  a = [1]
  print(a[1]) # should throw error
} catch (ex) {
  errorThrownAndCaught = true
  printF('Exception is %s', ex)
  exMsg = ex
} finally {
  finallyRan = true
  print('I ran all the time')
}

assertTrue(errorThrownAndCaught, "Looks like try catch didn't catch the error")
assertTrue(finallyRan, "Looks like try catch's finally didn't work")
assertTrue(nonEmpty(exMsg), "try catch's exception message is empty")

finallyRan = false
# When not catched, exception is thrown
assertThrows(exceptions.assertionFailedEx, {
  try {
    print('try with just finally')
    assertTrue(false)
  } finally {
    finallyRan = true
    print('in finally of try with just finally')
  }
})

assertTrue(finallyRan, "Looks like try catch's finally didn't work")

catchRan = false
try {
  print('try with no finally and no ex var')
} catch {
  catchRan = true
  print('in catch of try with just finally')
}
assertTrue(finallyRan, "Looks like try catch's catch didn't work")

# Make sure the ex variable can be re-assigned
ex = 'assigned again and fine'
print(ex)