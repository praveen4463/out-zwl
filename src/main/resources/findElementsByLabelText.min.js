const TEXT_NODE=3,SELECTOR="*",labelledNodeNames=["button","meter","output","progress","select","textarea","input"];function checkContainerType(e){if(!e||"function"!=typeof e.querySelector||"function"!=typeof e.querySelectorAll)throw new TypeError(`Expected container to be an Element, a Document or a DocumentFragment but got ${t=e,"object"!=typeof t?typeof t:null===t?"null":t.constructor.name}.`);var t}function getTextContent(e){return labelledNodeNames.includes(e.nodeName.toLowerCase())?"":e.nodeType===TEXT_NODE?e.textContent:Array.from(e.childNodes).map(e=>getTextContent(e)).join("")}function getLabelContent(e){let t;return t="label"===e.tagName.toLowerCase()?getTextContent(e):e.value||e.textContent,t}function getRealLabels(t){if(void 0!==t.labels)return t.labels??[];if(!isLabelable(t))return[];var e=t.ownerDocument.querySelectorAll("label");return Array.from(e).filter(e=>e.control===t)}function isLabelable(e){return/BUTTON|METER|OUTPUT|PROGRESS|SELECT|TEXTAREA/.test(e.tagName)||"INPUT"===e.tagName&&"hidden"!==e.getAttribute("type")}function getLabels(t,e){const n=e.getAttribute("aria-labelledby"),r=n?n.split(" "):[];return r.length?r.map(e=>{e=t.querySelector(`[id="${e}"]`);return e?{content:getLabelContent(e),formControl:null}:{content:"",formControl:null}}):Array.from(getRealLabels(e)).map(e=>{return{content:getLabelContent(e),formControl:Array.from(e.querySelectorAll("button, input, meter, output, progress, select, textarea")).filter(e=>e.matches(SELECTOR))[0]}})}function matches(e,t){if("string"!=typeof e)return!1;e=e.trim();return"string"==typeof t?e===t:t.test(e)}function getMatchWith(e){let t=e;var n=t.match(/^\/(.+?)\/([gimsuy]{0,6})$/);return Array.isArray(n)&&(e=n[1],n=n[2],t=new RegExp(e,n)),t}const findAllByLabelText=(t,e)=>{checkContainerType(t);const a=matches,u=getMatchWith(e);e=Array.from(t.querySelectorAll("*")).filter(e=>getRealLabels(e).length||e.hasAttribute("aria-labelledby")).reduce((r,o)=>{const e=getLabels(t,o);e.filter(e=>Boolean(e.formControl)).forEach(e=>{a(e.content,u)&&e.formControl&&r.push(e.formControl)});const l=e.filter(e=>Boolean(e.content)).map(e=>e.content);return a(l.join(" "),u)&&r.push(o),1<l.length&&l.forEach((e,t)=>{a(e,u)&&r.push(o);const n=[...l];n.splice(t,1),1<n.length&&a(n.join(" "),u)&&r.push(o)}),r},[]);return Array.from(new Set(e)).filter(e=>e.matches(SELECTOR))};